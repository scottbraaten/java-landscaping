/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */


import java.awt.Component;
import java.net.URL;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Scott Braaten
 */

public class BraatenLandscapingGUI extends javax.swing.JFrame {

    /**
     * Creates new form BraatenLandscapingGUI
     */
    public BraatenLandscapingGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btgYardType = new javax.swing.ButtonGroup();
        lblTitle = new javax.swing.JLabel();
        lblDesc = new javax.swing.JLabel();
        lblGrass = new javax.swing.JLabel();
        lblGravel = new javax.swing.JLabel();
        rdoGrass = new javax.swing.JRadioButton();
        rdoGravel = new javax.swing.JRadioButton();
        lblPhoto = new javax.swing.JLabel();
        btnNext = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        mnbMain = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mniExit = new javax.swing.JMenuItem();
        mnuOrder = new javax.swing.JMenu();
        mniSubmitOrder = new javax.swing.JMenuItem();
        mniReset = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Scott Braaten Landscapes");

        lblDesc.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblDesc.setText("Whether it's grass or gravel, we've got you covered!");

        lblGrass.setText("$5/sqft");

        lblGravel.setText("$2/sqft");

        btgYardType.add(rdoGrass);
        rdoGrass.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        rdoGrass.setText("Grass");
        rdoGrass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoGrassActionPerformed(evt);
            }
        });

        btgYardType.add(rdoGravel);
        rdoGravel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        rdoGravel.setText("Gravel");
        rdoGravel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoGravelActionPerformed(evt);
            }
        });

        lblPhoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dirt.jpg"))); // NOI18N

        btnNext.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnNext.setText("Next");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnReset.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnReset.setText("Reset");
        btnReset.setMinimumSize(new java.awt.Dimension(80, 40));
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        mnuFile.setText("File");

        mniExit.setText("Exit");
        mniExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniExitActionPerformed(evt);
            }
        });
        mnuFile.add(mniExit);

        mnbMain.add(mnuFile);

        mnuOrder.setText("Order");

        mniSubmitOrder.setText("Submit Order");
        mniSubmitOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSubmitOrderActionPerformed(evt);
            }
        });
        mnuOrder.add(mniSubmitOrder);

        mniReset.setText("Reset");
        mniReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniResetActionPerformed(evt);
            }
        });
        mnuOrder.add(mniReset);

        mnbMain.add(mnuOrder);

        setJMenuBar(mnbMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(179, 179, 179)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTitle))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblGravel)
                        .addComponent(lblGrass))
                    .addComponent(rdoGrass, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(rdoGravel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(110, 110, 110)
                .addComponent(lblPhoto)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(64, 64, 64))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblTitle)
                .addGap(43, 43, 43)
                .addComponent(lblDesc)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(118, 118, 118)
                                .addComponent(rdoGrass)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblGrass)
                                .addGap(138, 138, 138)
                                .addComponent(rdoGravel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblGravel))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addComponent(lblPhoto)))
                        .addContainerGap(30, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(171, 171, 171))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        // create the second GUI form
        BraatenLandscapingGUI_Info infoForm = new BraatenLandscapingGUI_Info();
        
        // set default close operation to "dispose" so application stays open
        infoForm.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        // launch the second GUI form by making it visible
        infoForm.setVisible(true);
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        reset();
    }//GEN-LAST:event_btnResetActionPerformed

    private void rdoGrassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoGrassActionPerformed
        if (rdoGrass.isSelected()) {
            // look in directory where class exists, and get location of "grass.jpg"
            URL location = this.getClass().getResource("grass.jpg");
            
            // create image using the location of "grass.jpg"
            ImageIcon icon = new ImageIcon(location);
            
            // set the image icon to the label
            lblPhoto.setIcon(icon);
        }
    }//GEN-LAST:event_rdoGrassActionPerformed

    private void rdoGravelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoGravelActionPerformed
        if (rdoGravel.isSelected()) {
            // find image, create image icon, and set image icon to label
            lblPhoto.setIcon(new ImageIcon(this.getClass().getResource("gravel.jpg")));
        }
    }//GEN-LAST:event_rdoGravelActionPerformed

    private void mniExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniExitActionPerformed
        // exit the application
        System.exit(0);
    }//GEN-LAST:event_mniExitActionPerformed

    private void mniSubmitOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSubmitOrderActionPerformed
        JOptionPane.showMessageDialog(this, "Method is not complete.");
        lblTitle.setText("" + btnReset.getX());
    }//GEN-LAST:event_mniSubmitOrderActionPerformed

    private void mniResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniResetActionPerformed
        
        reset();
    }//GEN-LAST:event_mniResetActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        int ogWidth = 894;
        int ogHeight = 640;
        
        int formWidth = this.getWidth();
        int formHeight = this.getHeight();
        
        // get value of position differential
        int xGradient = ogWidth > formWidth ? ~Math.abs((formWidth - ogWidth) / 2) : Math.abs((formWidth - ogWidth) / 2);
        int yGradient = ogHeight > formHeight ? ~Math.abs((formHeight - ogHeight) / 2) : Math.abs((formHeight - ogHeight) / 2);
        
        /* make lblTitle position and size relative */
        componentRelativeReposition(lblTitle, xGradient, yGradient, new Limits(0, 0, "", "lower"));
        
        /* make lblDesc position and size relative */
        componentRelativeReposition(lblDesc, xGradient, yGradient, new Limits(0, 80, "", "lower"));
        
        /* make lblPhoto position and Size relative */
        componentRelativeReposition(lblPhoto, xGradient, yGradient, new Limits(0, 140, "", "lower"));
        
        /* make rdoGrass position and size relative */
        componentRelativeReposition(rdoGrass, xGradient, yGradient, new Limits(0, 0, "", ""));
        
        /* make lblGrass position and size relative */
        componentRelativeReposition(lblGrass, xGradient, yGradient, new Limits(0, 0, "", ""));
        
        /* make rdoGravel position and size relative */
        componentRelativeReposition(rdoGravel, xGradient, yGradient, new Limits(0, 0, "", ""));
        
        /* make lblGravel position and size relative */
        componentRelativeReposition(lblGravel, xGradient, yGradient, new Limits(0, 0, "", ""));
        
        /* make btnNext position and size relative */
        componentRelativeReposition(btnNext, xGradient, yGradient, new Limits(700, 0, "upper", ""));
        
        /* make btnReset position and size relative */
        componentRelativeReposition(btnReset, xGradient, yGradient, new Limits(700, 0, "upper", ""));
    }//GEN-LAST:event_formComponentResized

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BraatenLandscapingGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BraatenLandscapingGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BraatenLandscapingGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BraatenLandscapingGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new BraatenLandscapingGUI().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btgYardType;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnReset;
    private javax.swing.JLabel lblDesc;
    private javax.swing.JLabel lblGrass;
    private javax.swing.JLabel lblGravel;
    private javax.swing.JLabel lblPhoto;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JMenuBar mnbMain;
    private javax.swing.JMenuItem mniExit;
    private javax.swing.JMenuItem mniReset;
    private javax.swing.JMenuItem mniSubmitOrder;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenu mnuOrder;
    private javax.swing.JRadioButton rdoGrass;
    private javax.swing.JRadioButton rdoGravel;
    // End of variables declaration//GEN-END:variables
    
    public class Limits {
        private int x, y;
        private String applyX, applyY;

        public int getX() {
            return x;
        }

        public void setX(int x) {
            this.x = x;
        }

        public int getY() {
            return y;
        }

        public void setY(int y) {
            this.y = y;
        }

        public String getApplyX() {
            return applyX;
        }

        public void setApplyX(String applyX) {
            this.applyX = applyX;
        }

        public String getApplyY() {
            return applyY;
        }

        public void setApplyY(String applyY) {
            this.applyY = applyY;
        }
        
        
        
        public Limits(int x, int y, String applyX, String applyY) {
            this.x = x;
            this.y = y;
            this.applyX = applyX;
            this.applyY = applyY;
        }
    }
    
    private void reset() {
        // clear the radiobutton selection
        btgYardType.clearSelection();
        
        // put the image back to "dirt"
        lblPhoto.setIcon(new ImageIcon(this.getClass().getResource("dirt.jpg")));
    }
    
    private void componentRelativeReposition(Component comp, int xGradient, int yGradient, Limits limits) {
        int compX = comp.getX();
        int compY = comp.getY();
        
        int updatedTitleX;
        int updatedTitleY;
        
        updatedTitleX = switch (limits.getApplyX()) {
            case "lower" -> (compX + xGradient) < limits.getX() ? limits.getX() : (compX + xGradient);
            case "higher" -> (compX + xGradient) > limits.getX() ? limits.getX() : (compX + xGradient);
            default -> compX + xGradient;
        };
        
        updatedTitleY = switch (limits.getApplyY()) {
            case "lower" -> (compY + yGradient) < limits.getY() ? limits.getY() : (compY + yGradient);
            case "higher" -> (compY + yGradient) > limits.getY() ? limits.getY() : (compY + yGradient);
            default -> compY + yGradient;
        };
        
        comp.setLocation(updatedTitleX, updatedTitleY);
    }
}